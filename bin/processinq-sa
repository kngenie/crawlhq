#!/usr/bin/python
# stand-alone (non-webapp) version of seenchecker-scheduler.
#
import sys, os
sys.path[0:0] = (os.path.join(os.path.dirname(__file__), '../lib'),)
import re
from optparse import OptionParser
from threading import Thread, Condition, RLock
import time
import traceback
import logging
import signal
try:
    import tornado.ioloop
    import tornado.web
except:
    tornado = None

import hqconfig
from dispatcher import Dispatcher, WorksetMapper
from scheduler import Scheduler

DEFAULT_BINDADDR = ('127.0.0.1', 8819)

# if tornado:
#     class API(tornado.web.RequestHandler):
        
def interrupted(sig, frame):
    global repeat
    print >>sys.stderr, "Interrupted, exiting..."
    repeat = False

# temporary - this is a copy of CrawlMapper in hq.py (move it to lib)
class CrawlMapper(WorksetMapper):
    """maps client queue id to set of WorkSets
    """
    def __init__(self, crawljob, nworksets_bits):
        super(CrawlMapper, self).__init__(nworksets_bits)
        self.crawljob = crawljob
        self.jobconfigs = self.crawljob.jobconfigs
        self.job = self.crawljob.jobname
        self.load_workset_assignment()

        self.client_last_active = {}

    def load_workset_assignment(self):
        wscl = self.jobconfigs.get_jobconf(self.job, 'wscl')
        if wscl is None:
            raise RuntimeError, 'workset-client map (wscl) is not set up'
        if len(wscl) != self.nworksets:
            raise RuntimeError, ('size of workset-client map (wscl) %d'
                                 ' does not match workset size %d',
                                 (len(wscl), self.nworksets))
        self.worksetclient = wscl
        self.numclients = max(wscl) + 1

    def wsidforclient(self, clid):
        '''return list of workset ids for node name of nodes-node cluster'''
        # XXX linear search
        qids = [i for i in xrange(len(self.worksetclient))
                if self.worksetclient[i] == clid]
        return qids

    def client_activating(self, clid):
        """called back by Scheduler when client gets a new feed request
        when it is inactive."""
        for wsid in self.wsidforclient(clid):
            self.crawljob.workset_activating(wsid)

    def clients(self, server):
        """returns a list of client-IDs server serves in job."""
        servers = coordinator.get_job_servers(self.job)
        for sid, name in servers.iteritems():
            if name == server:
                # assuming sid is zero-based and all sid < number of servers:
                clpsv = (self.numclients + len(servers) - 1) / len(servers)
                clients = range(self.numclients)[sid * clpsv:(sid + 1) * clpsv]
                return [str(n) for n in clients]
        return []

class CrawlJob(object):
    """just enough to satisfy CrawlMapper requirements"""
    def __init__(self, name, jobconfigs):
        self.jobname = name
        self.jobconfigs = jobconfigs

opt = OptionParser(usage='%prog [OPTIONS] JOBNAME CLIENT-ID ...')
opt.add_option('-n', action='store', dest='maxn', default=500, type='int',
               help='maximum number of URLs to process (advisory)')
opt.add_option('-1', action='store_true', dest='justonce', default=False,
               help="runs processinq just once, then exits"
               )
opt.add_option('-w', action='store', dest='exhaust_delay', default=60,
               type='int',
               help='seconds to wait between processing when queue '
               'got exhausted')
opt.add_option('-L', action='store', dest='listen',
               default=('%s:%d' % DEFAULT_BINDADDR),
               help='address:port to bind HTTP API end-point to. '
               'specify "none" to disable HTTP API')
opt.add_option('-v', action='store_true', dest='verbose', default=False,
               help='print out extra information')
options, args = opt.parse_args()

logging.basicConfig(level=(logging.DEBUG if options.verbose else logging.INFO),
                    format='%(asctime)s %(levelname)s %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S')

listen = options.listen
if listen == 'none':
    hostport = None
else:
    hostport = listen.split(':', 1)
    if len(hostport) == 1: hostport.append(DEFAULT_BINDADDR[1])
    if hostport[0] == '': hostport[0] = DEFAULT_BINDADDR[0]
    hostport[1] = int(hostport[1])

if len(args) < 1:
    opt.error('JOBNAME is missing')
job = args[0]
active_clids = args[1:]

repeat = not options.justonce
do_flush = False

domaininfo = hqconfig.factory.domaininfo()
jobconfigs = hqconfig.factory.jobconfigs()
coordinator = hqconfig.factory.coordinator()
mapper = CrawlMapper(CrawlJob(job, jobconfigs), hqconfig.NWORKSETS_BITS)
scheduler = Scheduler(hqconfig.worksetdir(job), mapper, reading=False)
dispatcher = Dispatcher(domaininfo, job, mapper=mapper, scheduler=scheduler)
if len(active_clids) < 1:
    active_clids = mapper.clients(os.uname()[1])
    if not active_clids:
        opt.error('cannot infer CLIENT-IDs. specify CLIENT-IDs manually')
    print >>sys.stderr, "using default CLIENT-IDs:", \
        ' '.join(map(str, active_clids))
# XXX needs clearner way to do this
dispatcher.is_client_active = lambda clid: str(clid) in active_clids

if hostport and tornado:
    # TODO
    class APIHandler(tornado.web.RequestHandler):
        def initialize(self, dispatcher):
            self.dispatcher = dispatcher
        def get(self, a):
            h = getattr(self, 'get_'+a, None)
            if not h:
                self.send_error(404, msg=('undefined action %s' % a))
                return
            try:
                h()
            except Exception as ex:
                self.write(dict(success=0, error=str(ex)))
            self.finish()
        def write_error(self, msg=''):
            self.write(dict(success=0, error=msg))

        def get_flush(self):
            job = self.get_argument('job')
            self.write(dict(success=1, r=self.dispatcher.flush_job(job)))
        def get_clearseen(self):
            job = self.get_argument('job')
            self.write(dict(success=1,
                            r=self.dispatcher.get_job(job).seen.clear()))
        def get_status(self):
            job = self.get_argument('job')
            self.write(dict(success=1,
                            r=self.dispatcher.get_job(job).get_status()))

    application = tornado.web.Application([
            (r'/(.*)', APIHandler, {'dispatcher':dispatcher}),
            ])
    application.listen(hostport[1], address=hostport[0])
    appth = Thread(target=tornado.ioloop.IOLoop.instance().start)
    appth.setDaemon(True)
    appth.start()

signal.signal(signal.SIGINT, interrupted)
try:
    while 1:
        # t and job should be set in Dispatcher.processinq
        start = time.time()
        r = dispatcher.processinq(options.maxn)
        r['t'] = time.time() - start
        r['job'] = job
        r.update(
            ps=r.get('processed', 0)/r['t'],
            eps=r.get('scheduled', 0)/r['t']
            )
        print >>sys.stderr, "%(job)s %(scheduled)d/%(processed)d X:%(excluded)d T:%(t).3f(D%(td).3f,S%(ts).3f) %(eps)8.2f/%(ps)8.2f/s" % r
        if not r.get('processed'):
            # flush worksets before sleeping - this is not perfect,
            # but better-than-nothing solution until we implement
            # inter-process communication.
            if do_flush:
                dispatcher.flush_clients()
                do_flush = False
            logging.info("inq exhausted, sleeping for %ds",
                         options.exhaust_delay)
            # because wait_available cannot be interrupted by INT signal,
            # we repeat short waits for exhaust_delay.
            #time.sleep(options.exhaust_delay)
            until = time.time() + options.exhaust_delay
            while time.time() < until and repeat:
                if dispatcher.wait_available(1.0):
                    break
        else:
            # flush if clients are starved.
            if scheduler.flush_starved():
                logging.info("workset flushed")
                do_flush = False
            else:
                do_flush = (r.get('scheduled', 0) > 0)
        if not repeat:
            break
finally:
    dispatcher.shutdown()
    scheduler.shutdown()
    jobconfigs.shutdown()
    domaininfo.shutdown()
